// You custom settings file to override Foundation defaults
@import "settings";
@import "compass/css3";
@import "_settings/functions/all";
@import "_settings/mixins/clearfix";


/* The Grid ---------------------- */

.otw-row, .otw-columns, .block-grid, .block-grid > li { @include box-sizing(border-box); }

.otw-row { width: $rowWidth; max-width: 100%; margin: 0 auto;
  .otw-row { width: auto; max-width: none; margin: 0 (-($columnGutter/2)); }

  &.otw-collapse {
    .otw-column, .otw-columns { padding: 0; }
  }
  .otw-row { width: auto; max-width: none; min-width: 0; margin: 0 (-($columnGutter/2));
    &.otw-collapse { margin: 0; }
  }
}

.otw-column, .otw-columns { float: $defaultFloat; min-height: 1px; padding: 0 ($columnGutter/2); position: relative;
  &.centered { float: none; margin: 0 auto; }
}

[class*="otw-column"] + [class*="otw-column"]:last-child { float: $defaultOpposite; }
[class*="otw-column"] + [class*="otw-column"].end { float: $defaultFloat; }

// Creating column classes
@for $i from 1 through $totalColumns {
  .otw-#{convert-number-to-word($i)} { width: gridCalc($i, $totalColumns); }
}

// Creating .otw-row-# classes
@for $i from 1 through $totalColumns {
  .otw-row {
    .otw-#{convert-number-to-word($i)} { @extend .otw-#{convert-number-to-word($i)}; }
  }
}

// Creating .otw-row .offset-by-# classes
@for $i from 1 through $totalColumns - 2 {
  .otw-row {
    .otw-offset-by-#{convert-number-to-word($i)} { margin-#{$defaultFloat}: gridCalc($i, $totalColumns); }
  }
}

// Creating .otw-row .push-# classes
@for $i from 2 through $totalColumns - 2 {
  .otw-push-#{convert-number-to-word($i)} { #{$defaultFloat}: gridCalc($i, $totalColumns); }
  .otw-pull-#{convert-number-to-word($i)} { #{$defaultOpposite}: gridCalc($i, $totalColumns); }
}

img, object, embed { max-width: 100%; height: auto; }
object, embed { height: 100%; }
img { -ms-interpolation-mode: bicubic; }
#map_canvas img, .map_canvas img {max-width: none!important;}

/* Nicolas Gallagher's micro clearfix */
.otw-row { @include clearfix(); }

/* Block Grids ---------------------- */

/* These are 2-up, 3-up, 4-up and 5-up ULs, suited
for repeating blocks of content. Add 'mobile' to
them to switch them just like the layout grid
(one item per line) on phones

For IE7/8 compatibility block-grid items need to be
the same height. You can optionally uncomment the
lines below to support arbitrary height, but know
that IE7/8 do not support :nth-child.
-------------------------------------------------- */

.block-grid { display: block; overflow: hidden; padding: 0;

  &>li { display: block; height: auto; float: $defaultFloat; }

  @for $i from 1 through $blockGridElements {
    &.#{convert-number-to-word($i)}-up {
      /* More unified spacing between blocks
      @if $i == 1 { margin: 0; }
      @if $i == 2 { margin: 0 -15px; }
      @if $i == 3 { margin: 0 -12px; }
      @if $i == 4 { margin: 0 -10px; }
      @else { margin: 0 -8px; }
      */
      margin: 0 -10px;
      &>li {
        width: 100%/$i;
        /* More unified spacing between blocks
        @if $i == 1 { padding: 0 0 15px; }
        @if $i == 2 { padding: 0 15px 15px; }
        @if $i == 3 { padding: 0 12px 12px; }
        @if $i == 4 { padding: 0 10px 10px; }
        @else { padding: 0 8px 8px; }
        */
        padding: 0 10px 10px;
        @if $i > 1 { &:nth-child(#{$i}n+1) { clear: both; } }
      }
    }
  }
}


// The grid for mobile devices
/* Small Devices ------------ */
@media only screen and (max-width: $screenSmall - 1) {

  /* The Grid --- */
  .otw-row, .fixed-width { width: auto; min-width: 0; margin-#{$defaultFloat}: 0; margin-#{$defaultOpposite}: 0; }
  .otw-column, .otw-columns { width: auto !important; float: none;  }
  .otw-column:last-child, .otw-columns:last-child { float: none; }
  [class*="column"] + [class*="column"]:last-child { float: none; }
  .otw-column:before, .otw-columns:before, .otw-column:after, .otw-columns:after { content:""; display:table; }
  .otw-column:after, .otw-columns:after { clear: both; }

  // Placeholder classes for mobile grid overrides
  %no-default-margin { margin-#{$defaultFloat}: 0 !important; }
  %default-auto { #{$defaultFloat}: auto; }
  %opposite-auto { #{$defaultOpposite}: auto; }

  @for $i from 1 through $totalColumns - 2 {
    .offset-by-#{convert-number-to-word($i)} { @extend %no-default-margin; }
  }
  @for $i from 2 through $totalColumns - 2 {
    .otw-push-#{convert-number-to-word($i)} { @extend %default-auto; }
    .otw-pull-#{convert-number-to-word($i)} { @extend %opposite-auto; }
  }

  /* Mobile 4-column Grid */
  @for $i from 1 through $mobileTotalColumns {
    .otw-row {
      .mobile-#{convert-number-to-word($i)} { width: gridCalc($i, $mobileTotalColumns) !important; float: $defaultFloat; padding: 0 ($columnGutter/2);
        &:last-child { float: $defaultOpposite; }
        &.end { float: $defaultFloat; }
      }
      &.collapse {
        .mobile-#{convert-number-to-word($i)} { padding: 0; }
      }
    }
  }
  @for $i from 1 through $mobileTotalColumns - 1 {
    .otw-push-#{convert-number-to-word($i)}-mobile { #{$defaultFloat}: gridCalc($i, $mobileTotalColumns); }
    .otw-pull-#{convert-number-to-word($i)}-mobile { #{$defaultOpposite}: gridCalc($i, $mobileTotalColumns); }
  }

  /* Block Grids --- */
  /*                 */
  .block-grid.mobile {
    &>li { float: none; width: 100%; margin-#{$defaultFloat}: 0; }
  }

  .block-grid {
    &>li { clear: none !important; }
    @for $i from 1 through $blockGridElements {
      &.mobile-#{convert-number-to-word($i)}-up>li {
        width: 100%/$i;
        @if $i > 1 { &:nth-child(#{$i}n+1) { clear: both; } }
      }
    }
  }

  /* Forms --- */
  /*           */

  /* Label alignment */
  label.right { text-align: left; }

  /* Extend width of all inputs */
  @for $i from 1 through $totalColumns {
    input[type="text"].otw-#{convert-number-to-word($i)},
    input[type="password"].otw-#{convert-number-to-word($i)},
    input[type="date"].otw-#{convert-number-to-word($i)},
    input[type="datetime"].otw-#{convert-number-to-word($i)},
    input[type="email"].otw-#{convert-number-to-word($i)},
    input[type="number"].otw-#{convert-number-to-word($i)},
    input[type="search"].otw-#{convert-number-to-word($i)},
    input[type="tel"].otw-#{convert-number-to-word($i)},
    input[type="time"].otw-#{convert-number-to-word($i)},
    input[type="url"].otw-#{convert-number-to-word($i)},
    textarea.otw-#{convert-number-to-word($i)} {
      width: 100% !important;
    }
  }
}